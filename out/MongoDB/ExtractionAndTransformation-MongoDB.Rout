
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> args=(commandArgs(trailingOnly = TRUE))
> 
> if(length(args)>0){
+   for(i in 1:length(args)){
+     eval(parse(text=args[[i]]))
+   } 
+ }
> 
> setwd(path)
> rm(list=ls()) # Clear workspace
> 
> library(mongolite)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)
> 
> # source(file = "src/Config.R") # Load config file with root path, etc
> 
> 
> # EXTRACTION
> 
> # Load every filename of datasets
> filenames <- list.files("dat",
+                         pattern="atp_matches_[0-9]{4}", 
+                         full.names=TRUE
+ )
> 
> # Create collection of raw matches
> con <- mongo(
+   collection = "matches_raw", 
+   db = "tennis", 
+   url = "mongodb://localhost",
+   verbose = TRUE
+ )
> 
> # Empty collection
> if(con$count() > 0){
+   con$remove(query = "{}", multiple=T)  
+ }
[1] TRUE
> 
> # Add csvs to collection
> for (i in 1:length(filenames))
+ {
+   dataset <- read.csv(filenames[i])
+   
+   # Was the winner the tallest player? (response variable)
+   dataset$w_is_tallest <- dataset$winner_ht > dataset$loser_ht
+   dataset$w_is_tallest <- as.factor(dataset$w_is_tallest)
+   
+   # Remove the rows where the response variable is NA.
+   if(length(which(is.na(dataset$w_is_tallest)))>0){
+     dataset <- dataset[-which(is.na(dataset$w_is_tallest)),]
+   }
+   
+   # Insert raw data
+   con$insert(dataset)
+   
+ }
Complete! Processed total of 184 rows.
Complete! Processed total of 316 rows.
Complete! Processed total of 433 rows.
Complete! Processed total of 871 rows.
Processed 1000 rows...Complete! Processed total of 1002 rows.
Processed 1000 rows...Complete! Processed total of 1252 rows.
Processed 1000 rows...Complete! Processed total of 1279 rows.
Processed 1000 rows...Complete! Processed total of 1451 rows.
Processed 1000 rows...Complete! Processed total of 1522 rows.
Processed 1000 rows...Complete! Processed total of 1863 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2168 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2362 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2611 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2858 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3360 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3147 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3024 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3218 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3068 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3307 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3524 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3361 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3291 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3505 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3597 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3711 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3755 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3608 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3562 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3427 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3383 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3128 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3152 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3113 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3018 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3002 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3046 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3038 rows.
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Complete! Processed total of 3019 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2922 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2852 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2858 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2786 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2747 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2668 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2415 rows.
Processed 1000 rows...Processed 2000 rows...Complete! Processed total of 2101 rows.
Processed 1000 rows...Complete! Processed total of 1853 rows.
> rm(i, filenames, dataset)
> 
> # Fetch all the matches
> matches <- con$find()
 Found 1000 records... Found 2000 records... Found 3000 records... Found 4000 records... Found 5000 records... Found 6000 records... Found 7000 records... Found 8000 records... Found 9000 records... Found 10000 records... Found 11000 records... Found 12000 records... Found 13000 records... Found 14000 records... Found 15000 records... Found 16000 records... Found 17000 records... Found 18000 records... Found 19000 records... Found 20000 records... Found 21000 records... Found 22000 records... Found 23000 records... Found 24000 records... Found 25000 records... Found 26000 records... Found 27000 records... Found 28000 records... Found 29000 records... Found 30000 records... Found 31000 records... Found 32000 records... Found 33000 records... Found 34000 records... Found 35000 records... Found 36000 records... Found 37000 records... Found 38000 records... Found 39000 records... Found 40000 records... Found 41000 records... Found 42000 records... Found 43000 records... Found 44000 records... Found 45000 records... Found 46000 records... Found 47000 records... Found 48000 records... Found 49000 records... Found 50000 records... Found 51000 records... Found 52000 records... Found 53000 records... Found 54000 records... Found 55000 records... Found 56000 records... Found 57000 records... Found 58000 records... Found 59000 records... Found 60000 records... Found 61000 records... Found 62000 records... Found 63000 records... Found 64000 records... Found 65000 records... Found 66000 records... Found 67000 records... Found 68000 records... Found 69000 records... Found 70000 records... Found 71000 records... Found 72000 records... Found 73000 records... Found 74000 records... Found 75000 records... Found 76000 records... Found 77000 records... Found 78000 records... Found 79000 records... Found 80000 records... Found 81000 records... Found 82000 records... Found 83000 records... Found 84000 records... Found 85000 records... Found 86000 records... Found 87000 records... Found 88000 records... Found 89000 records... Found 90000 records... Found 91000 records... Found 92000 records... Found 93000 records... Found 94000 records... Found 95000 records... Found 96000 records... Found 97000 records... Found 98000 records... Found 99000 records... Found 1e+05 records... Found 101000 records... Found 102000 records... Found 103000 records... Found 104000 records... Found 105000 records... Found 106000 records... Found 107000 records... Found 108000 records... Found 109000 records... Found 110000 records... Found 111000 records... Found 112000 records... Found 113000 records... Found 114000 records... Found 115000 records... Found 116000 records... Found 117000 records... Found 118000 records... Found 119000 records... Found 120000 records... Found 121000 records... Found 122000 records... Found 123000 records... Found 124000 records... Found 125000 records... Found 125738 records... Imported 125738 records. Simplifying into dataframe...
> 
> # Close the connection
> rm(con)
> 
> 
> # TRANSFORMATION
> 
> # Extract the year of the game from the 'tourney_date' field
> matches$tourney_date  <- as.Date(as.character(matches$tourney_date),format="%Y%m%d")
> matches$tourney_year  <- as.numeric(format(matches$tourney_date,'%Y'))
> matches$tourney_month <- as.numeric(format(matches$tourney_date,'%m'))
> 
> # Convert names to characters. Not necessary here. Already characters
> # Were they left as factors, troubles would arise due to new levels
> # matches$winner_name <- as.character(matches$winner_name)
> # matches$loser_name <- as.character(matches$loser_name)
> 
> # Replicate every single row swapping winner columns for loser columns. 
> # Rename column names
> colnames(matches) <- gsub("winner", "first_player", colnames(matches))
> colnames(matches) <- gsub("loser", "second_player", colnames(matches))
> 
> # Save winner and loser columns into variables
> winner_cols <- matches[, grep("first_player", colnames(matches))]
> loser_cols  <- matches[, grep("second_player", colnames(matches))]
> 
> # Duplicate dataframe for swapped results
> matchesInverted <- matches
> 
> # Swap winner and loser columns
> for (name_second in colnames(loser_cols)){
+   name_first <- gsub("second_player", "first_player", name_second)
+   matchesInverted[,name_first] <- loser_cols[,name_second]
+ }
> 
> for (name_first in colnames(winner_cols)){
+   name_second <- gsub("first_player", "second_player", name_first)
+   matchesInverted[,name_second] <- winner_cols[,name_first]
+ }
> 
> rm(loser_cols, winner_cols, name_first, name_second)
> 
> # Intersect the rows of the previous dataset with the ones of the swapped one.
> # The row as it came will appear first. The duplicated and swapped will be just below.
> n <- nrow(matches)
> matches <- rbind(matches, matchesInverted)
> matches <- matches[kronecker(1:n, c(0, n), "+"), ]
> rm(matchesInverted, n)
> 
> # Difference in height
> matches$diff_ht <- matches$first_player_ht - matches$second_player_ht
> 
> # Difference in age
> matches$diff_age <- matches$first_player_age - matches$second_player_age
> 
> # Difference in rank points
> matches$diff_rank_points <- matches$first_player_rank_points - matches$second_player_rank_points
> 
> # Remove the rows with non-ranked players
> if(length(which(is.na(matches$diff_rank_points)))>0){
+   matches <- matches[-which(is.na(matches$diff_rank_points)),]
+ }
> 
> matches <- matches[c(
+   "surface",               "tourney_year",               "tourney_level",           "match_num",
+   "first_player_seed",     "first_player_entry",         "first_player_hand",       "first_player_ht",
+   "first_player_age",      "first_player_rank_points",   "second_player_seed",      "second_player_entry",
+   "second_player_hand",    "second_player_ht",           "second_player_age",       "second_player_rank_points",  
+   "best_of",               "round",                      "draw_size",               "w_is_tallest"
+ )]
> 
> # Create connection to the cleaned matches collection
> con <- mongo(
+   collection = "matches_clean", 
+   db = "tennis", 
+   url = "mongodb://localhost",
+   verbose = TRUE
+ )
> 
> # Remove collection if not empty
> if(con$count() > 0){
+   con$remove(query = "{}", multiple=T)  
+ }
[1] TRUE
> 
> # Insert the cleaned data
> con$insert(matches)
Processed 1000 rows...Processed 2000 rows...Processed 3000 rows...Processed 4000 rows...Processed 5000 rows...Processed 6000 rows...Processed 7000 rows...Processed 8000 rows...Processed 9000 rows...Processed 10000 rows...Processed 11000 rows...Processed 12000 rows...Processed 13000 rows...Processed 14000 rows...Processed 15000 rows...Processed 16000 rows...Processed 17000 rows...Processed 18000 rows...Processed 19000 rows...Processed 20000 rows...Processed 21000 rows...Processed 22000 rows...Processed 23000 rows...Processed 24000 rows...Processed 25000 rows...Processed 26000 rows...Processed 27000 rows...Processed 28000 rows...Processed 29000 rows...Processed 30000 rows...Processed 31000 rows...Processed 32000 rows...Processed 33000 rows...Processed 34000 rows...Processed 35000 rows...Processed 36000 rows...Processed 37000 rows...Processed 38000 rows...Processed 39000 rows...Processed 40000 rows...Processed 41000 rows...Processed 42000 rows...Processed 43000 rows...Processed 44000 rows...Processed 45000 rows...Processed 46000 rows...Processed 47000 rows...Processed 48000 rows...Processed 49000 rows...Processed 50000 rows...Processed 51000 rows...Processed 52000 rows...Processed 53000 rows...Processed 54000 rows...Processed 55000 rows...Processed 56000 rows...Processed 57000 rows...Processed 58000 rows...Processed 59000 rows...Processed 60000 rows...Processed 61000 rows...Processed 62000 rows...Processed 63000 rows...Processed 64000 rows...Processed 65000 rows...Processed 66000 rows...Processed 67000 rows...Processed 68000 rows...Processed 69000 rows...Processed 70000 rows...Processed 71000 rows...Processed 72000 rows...Processed 73000 rows...Processed 74000 rows...Processed 75000 rows...Processed 76000 rows...Processed 77000 rows...Processed 78000 rows...Processed 79000 rows...Processed 80000 rows...Processed 81000 rows...Processed 82000 rows...Processed 83000 rows...Processed 84000 rows...Processed 85000 rows...Processed 86000 rows...Processed 87000 rows...Processed 88000 rows...Processed 89000 rows...Processed 90000 rows...Processed 91000 rows...Processed 92000 rows...Processed 93000 rows...Processed 94000 rows...Processed 95000 rows...Processed 96000 rows...Processed 97000 rows...Processed 98000 rows...Processed 99000 rows...Processed 1e+05 rows...Processed 101000 rows...Processed 102000 rows...Processed 103000 rows...Processed 104000 rows...Processed 105000 rows...Processed 106000 rows...Processed 107000 rows...Processed 108000 rows...Processed 109000 rows...Processed 110000 rows...Processed 111000 rows...Processed 112000 rows...Processed 113000 rows...Processed 114000 rows...Processed 115000 rows...Processed 116000 rows...Processed 117000 rows...Processed 118000 rows...Processed 119000 rows...Processed 120000 rows...Processed 121000 rows...Processed 122000 rows...Processed 123000 rows...Processed 124000 rows...Processed 125000 rows...Processed 126000 rows...Processed 127000 rows...Processed 128000 rows...Processed 129000 rows...Processed 130000 rows...Processed 131000 rows...Processed 132000 rows...Processed 133000 rows...Processed 134000 rows...Processed 135000 rows...Processed 136000 rows...Processed 137000 rows...Processed 138000 rows...Processed 139000 rows...Processed 140000 rows...Processed 141000 rows...Processed 142000 rows...Processed 143000 rows...Processed 144000 rows...Processed 145000 rows...Processed 146000 rows...Processed 147000 rows...Processed 148000 rows...Processed 149000 rows...Processed 150000 rows...Processed 151000 rows...Processed 152000 rows...Processed 153000 rows...Processed 154000 rows...Processed 155000 rows...Processed 156000 rows...Processed 157000 rows...Processed 158000 rows...Processed 159000 rows...Processed 160000 rows...Processed 161000 rows...Processed 162000 rows...Processed 163000 rows...Processed 164000 rows...Processed 165000 rows...Processed 166000 rows...Processed 167000 rows...Processed 168000 rows...Processed 169000 rows...Processed 170000 rows...Processed 171000 rows...Processed 172000 rows...Processed 173000 rows...Processed 174000 rows...Processed 175000 rows...Processed 176000 rows...Processed 177000 rows...Processed 178000 rows...Processed 179000 rows...Processed 180000 rows...Processed 181000 rows...Processed 182000 rows...Processed 183000 rows...Processed 184000 rows...Processed 185000 rows...Processed 186000 rows...Processed 187000 rows...Processed 188000 rows...Processed 189000 rows...Processed 190000 rows...Processed 191000 rows...Processed 192000 rows...Processed 193000 rows...Processed 194000 rows...Processed 195000 rows...Processed 196000 rows...Processed 197000 rows...Processed 198000 rows...Processed 199000 rows...Processed 2e+05 rows...Processed 201000 rows...Processed 202000 rows...Processed 203000 rows...Processed 204000 rows...Processed 205000 rows...Processed 206000 rows...Processed 207000 rows...Processed 208000 rows...Processed 209000 rows...Processed 210000 rows...Processed 211000 rows...Processed 212000 rows...Processed 213000 rows...Processed 214000 rows...Processed 215000 rows...Processed 216000 rows...Processed 217000 rows...Processed 218000 rows...Processed 219000 rows...Processed 220000 rows...Processed 221000 rows...Processed 222000 rows...Processed 223000 rows...Processed 224000 rows...Processed 225000 rows...Processed 226000 rows...Processed 227000 rows...Complete! Processed total of 227612 rows.
[1] TRUE
> rm(matches)
> 
> # Close the connection
> rm(con)
> 
> proc.time()
   user  system elapsed 
 23.204   0.444 199.962 
